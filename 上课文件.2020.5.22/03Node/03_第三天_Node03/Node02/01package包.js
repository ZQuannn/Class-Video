/*
package包 也是NodeJS中的核心概念之一.

模块本质上是一个文件,如果我们将来在块又需要引入D需要一个模块并且该模块比较复杂,例如需要A模块引入B模块,B模块里又引入了C模块,C模模块等等.总之是需要几个模块相互合作才能完成某功能;我们就会把这几个模块放在一个文件夹中!!! 这个文件夹我们管它叫做"包"也就是"package".

那么问题来了:我们所需要的功能不是某一个单一模块而是一个文件夹,那么我们在引入的时候该如何引入呢???
如果我们直接使用require直接引入文件夹的名字呢??那系统又如何知道该去获取文件夹中的哪个js文件呢??? 并且exports作为唯一出口对象,我们得到的又是谁呢???
如果文件中有index.js文件,默认就会获取index模块!!

针对这个问题,node引入了"包"的概念!
包:本质上是一个文件夹,一个包(文件夹)中可以包含多个模块(文件).我们将来在引入一些第三方的插件时,大部分插件都是以包(文件夹)的形式存在的.所以在使用其的时候,我们都是直接引入包.

commonJS规定了,自定义一个包.就需要保证每个包中都含有一个"package.json"文件.该文件里面是对当前包的一些配置信息的记录.那将来引入此包的时候,node就会根据package.json文件取识别包里面的模块.进而引入对应的exports对象!!!

node允许我们通过交互式的方法,创建package.json文件.不需要我们手动创建和书写!!!
npm的全名???   node package manager  包管理器,负责对第三方的包进行管理!
步骤:
1.通过命令行  来到包对应的路径下
2.命令:npm init(交互式)  或者  npm init -y(快速创建但是都为默认值)

-------------------------------------------
npm:不仅可以管理定义包.大多数情况来管理第三方插件,例如swiper jquery animate.css等
我们可以让npm快速方便的下载管理第三方包,并且根据依赖关系自动下载第三方所需要的依赖:
注意:node和nmp并不是绑定使用的,以后完全可以只是用npm来管理插件.
1.下载
npm install(i) 插件名                 ----安装某个插件
npm install(i)                       ----查看package.json文件 安装所需插件
npm install(i) 插件1 插件2 插件3..     ---一次性安装多个插件
npm install(i) 插件 --save-dev        ------开发环境所需依赖(一旦项目上线,此方式安装的插件会被自动移除)
npm install(i) 插件 --save            ------生产环境所需依赖
npm install(i) 插件@版本               ------安装指定版本的插件

2.移除
npm uninstall(简写uni) 插件名
3.查看包信息
npm view 插件名
4.查看包的最新版本
npm view 插件名 version
5.查看包在当前项目中的版本
npm list 插件名 version

*/

const  school = require("./school");
console.log(school.name);